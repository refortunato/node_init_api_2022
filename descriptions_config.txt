Git Config:

# Config git setting Visual Studio Code as default editor of git
> git config --global core.editor code

# Open git file global config
> git config --global --edit

Set git config file:
>===========================
[user]
	name = My Name
	email = mygitemail@mail.com
[core]
	editor = code --wait
[alias]
  s = !git status -s
  c = !git add --all && git commit -m
	l = !git log --pretty=format:'%C(blue)%h %C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'
  # do a commit with the last one
  amend = !git add . && git commit --amend --no-edit
============================<

---------------------------------------------------------------------------

Use EditorConfig

Instal EditorConfig for vscode and add it to you project clicking with the right button of mouse in your
project and generate .editorconfig

It will help you to keep a standard even if other people use a different SO that change the end of the line character, for example.

---------------------------------------------------------------------------

Use Conventional Commit:

link: https://www.conventionalcommits.org/en/v1.0.0/

# add git commit message linter to validate commit messages
> npm i -D git-commit-msg-linter

---------------------------------------------------------------------------

Use Typescript:

# add typescript and types/node to project
> npm i -D typescript @types/node

# run tsconfig init
> npx tsc --init

set tsconfig.json as this:
>==========================
{
  "compilerOptions": {
    "target": "es2021",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    "baseUrl": "./src",                                  /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "@/*": ["*"], /* to works @ when import some script. Ex: import Teste from '@/my_dir/test'.*/
      "@/tests/*": ["../tests/*"]
    },                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    //"strict": true,                                      /* Enable all strict type-checking options. */
    //"skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
    "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
  },
  "include": ["src", "tests"]
}
=========================<

Add dist directory in .gitignore

See the version of node in: https://node.green/

create a file in your project called tsconfig-build.json. It will exclude "test" directory when you build you Typescript app
>=========================
{
  "extends": "./tsconfig.json",
  "exclude": ["tests"]
}
=========================<


# add rimraf to clear dist directory when build
> npm i rimraf

and in your package.json add the command in "scripts":
  "scripts": {
    "test": "jest",
    "build": "rimraf dist && tsc -p tsconfig-build.json"
  },

# add modules-alias to convert correctly to javascript because we will use paths whit @ to import our files
> npm i module-alias
> npm i -D @types/module-alias

create a index.ts file like that:
>==========================
import { addAlias } from 'module-alias'
import { resolve } from 'path'

addAlias('@', resolve('dist'))
==========================<

and import this file in your start script. Ex: import './config/module-alias';
After that, you are able to use @ to import (@ is your root dir ("baseUrl" in your tsconfig.json)). Ex: import SomeClass from '@/some-dir/SomeClass'

---------------------------------------------------------------------------

ESLint:

link: https://eslint.org/docs/user-guide/getting-started

We will use eslint-config-standard-with-typescript.
See how to install :
https://www.npmjs.com/package/eslint-config-standard-with-typescript

Command Ex:
> npm install --save-dev \
  typescript@^4 \
  eslint@^7.12.1 \
  eslint-plugin-promise@^5.0.0 \
  eslint-plugin-import@^2.22.1 \
  eslint-plugin-node@^11.1.0 \
  @typescript-eslint/eslint-plugin@^4.0.1 \
  eslint-config-standard-with-typescript@latest

create a file called .eslintrc.json at your root project
Ex:
>==========================
{
  "extends": "standard-with-typescript",
  "parserOptions": {
    "project": "./tsconfig.json"
  }
}
==========================<



Install ESLint extension in your visual studio code

command + shift + P and type setting to open settings.json
add the config bellow:
{
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
}

Create a file called .eslintignore add the node_modules and dist directory to it.

--------------------------------------------------------

Jest:

# add Jest to project
> npm i -D jest @types/jest ts-jest

# run this command to config jest
> npx jest --init